/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateTokenWithHookInstruction,
  type ParsedInitializeExtraAccountMetaListInstruction,
  type ParsedMintTokensInstruction,
} from '../instructions';

export const TOKEN_SETUP_PROGRAM_ADDRESS =
  'Ba93wuicukbNB6djDoUkvMpDUxTw4Gzo3VH1oLfq9HBp' as Address<'Ba93wuicukbNB6djDoUkvMpDUxTw4Gzo3VH1oLfq9HBp'>;

export enum TokenSetupInstruction {
  CreateTokenWithHook,
  InitializeExtraAccountMetaList,
  MintTokens,
}

export function identifyTokenSetupInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenSetupInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([186, 132, 153, 159, 183, 146, 10, 218])
      ),
      0
    )
  ) {
    return TokenSetupInstruction.CreateTokenWithHook;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([92, 197, 174, 197, 41, 124, 19, 3])
      ),
      0
    )
  ) {
    return TokenSetupInstruction.InitializeExtraAccountMetaList;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 132, 24, 246, 122, 39, 8, 243])
      ),
      0
    )
  ) {
    return TokenSetupInstruction.MintTokens;
  }
  throw new Error(
    'The provided instruction could not be identified as a tokenSetup instruction.'
  );
}

export type ParsedTokenSetupInstruction<
  TProgram extends string = 'Ba93wuicukbNB6djDoUkvMpDUxTw4Gzo3VH1oLfq9HBp',
> =
  | ({
      instructionType: TokenSetupInstruction.CreateTokenWithHook;
    } & ParsedCreateTokenWithHookInstruction<TProgram>)
  | ({
      instructionType: TokenSetupInstruction.InitializeExtraAccountMetaList;
    } & ParsedInitializeExtraAccountMetaListInstruction<TProgram>)
  | ({
      instructionType: TokenSetupInstruction.MintTokens;
    } & ParsedMintTokensInstruction<TProgram>);
