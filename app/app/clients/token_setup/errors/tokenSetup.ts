/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { TOKEN_SETUP_PROGRAM_ADDRESS } from '../programs';

/** NotSigner: Not a signer */
export const TOKEN_SETUP_ERROR__NOT_SIGNER = 0x1770; // 6000
/** UnauthorizedAdmin: Unauthorized admin */
export const TOKEN_SETUP_ERROR__UNAUTHORIZED_ADMIN = 0x1771; // 6001
/** InvalidMetadata: Invalid metadata */
export const TOKEN_SETUP_ERROR__INVALID_METADATA = 0x1772; // 6002
/** MintAuthorityMismatch: Mint authority mismatch */
export const TOKEN_SETUP_ERROR__MINT_AUTHORITY_MISMATCH = 0x1773; // 6003

export type TokenSetupError =
  | typeof TOKEN_SETUP_ERROR__INVALID_METADATA
  | typeof TOKEN_SETUP_ERROR__MINT_AUTHORITY_MISMATCH
  | typeof TOKEN_SETUP_ERROR__NOT_SIGNER
  | typeof TOKEN_SETUP_ERROR__UNAUTHORIZED_ADMIN;

let tokenSetupErrorMessages: Record<TokenSetupError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  tokenSetupErrorMessages = {
    [TOKEN_SETUP_ERROR__INVALID_METADATA]: `Invalid metadata`,
    [TOKEN_SETUP_ERROR__MINT_AUTHORITY_MISMATCH]: `Mint authority mismatch`,
    [TOKEN_SETUP_ERROR__NOT_SIGNER]: `Not a signer`,
    [TOKEN_SETUP_ERROR__UNAUTHORIZED_ADMIN]: `Unauthorized admin`,
  };
}

export function getTokenSetupErrorMessage(code: TokenSetupError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (tokenSetupErrorMessages as Record<TokenSetupError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isTokenSetupError<TProgramErrorCode extends TokenSetupError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TOKEN_SETUP_PROGRAM_ADDRESS,
    code
  );
}
