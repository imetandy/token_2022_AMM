/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TOKEN_SETUP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_TOKEN_WITH_HOOK_DISCRIMINATOR = new Uint8Array([
  186, 132, 153, 159, 183, 146, 10, 218,
]);

export function getCreateTokenWithHookDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TOKEN_WITH_HOOK_DISCRIMINATOR
  );
}

export type CreateTokenWithHookInstruction<
  TProgram extends string = typeof TOKEN_SETUP_PROGRAM_ADDRESS,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountCounterHookProgram extends string | IAccountMeta<string> = string,
  TAccountExtraAccountMetaList extends string | IAccountMeta<string> = string,
  TAccountMintTradeCounter extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMint extends string
        ? WritableSignerAccount<TAccountMint> & IAccountSignerMeta<TAccountMint>
        : TAccountMint,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCounterHookProgram extends string
        ? ReadonlyAccount<TAccountCounterHookProgram>
        : TAccountCounterHookProgram,
      TAccountExtraAccountMetaList extends string
        ? WritableAccount<TAccountExtraAccountMetaList>
        : TAccountExtraAccountMetaList,
      TAccountMintTradeCounter extends string
        ? WritableAccount<TAccountMintTradeCounter>
        : TAccountMintTradeCounter,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTokenWithHookInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  symbol: string;
  uri: string;
};

export type CreateTokenWithHookInstructionDataArgs = {
  name: string;
  symbol: string;
  uri: string;
};

export function getCreateTokenWithHookInstructionDataEncoder(): Encoder<CreateTokenWithHookInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_TOKEN_WITH_HOOK_DISCRIMINATOR,
    })
  );
}

export function getCreateTokenWithHookInstructionDataDecoder(): Decoder<CreateTokenWithHookInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreateTokenWithHookInstructionDataCodec(): Codec<
  CreateTokenWithHookInstructionDataArgs,
  CreateTokenWithHookInstructionData
> {
  return combineCodec(
    getCreateTokenWithHookInstructionDataEncoder(),
    getCreateTokenWithHookInstructionDataDecoder()
  );
}

export type CreateTokenWithHookAsyncInput<
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountCounterHookProgram extends string = string,
  TAccountExtraAccountMetaList extends string = string,
  TAccountMintTradeCounter extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  mint: TransactionSigner<TAccountMint>;
  authority: TransactionSigner<TAccountAuthority>;
  payer: TransactionSigner<TAccountPayer>;
  counterHookProgram: Address<TAccountCounterHookProgram>;
  extraAccountMetaList?: Address<TAccountExtraAccountMetaList>;
  mintTradeCounter?: Address<TAccountMintTradeCounter>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  name: CreateTokenWithHookInstructionDataArgs['name'];
  symbol: CreateTokenWithHookInstructionDataArgs['symbol'];
  uri: CreateTokenWithHookInstructionDataArgs['uri'];
};

export async function getCreateTokenWithHookInstructionAsync<
  TAccountMint extends string,
  TAccountAuthority extends string,
  TAccountPayer extends string,
  TAccountCounterHookProgram extends string,
  TAccountExtraAccountMetaList extends string,
  TAccountMintTradeCounter extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_SETUP_PROGRAM_ADDRESS,
>(
  input: CreateTokenWithHookAsyncInput<
    TAccountMint,
    TAccountAuthority,
    TAccountPayer,
    TAccountCounterHookProgram,
    TAccountExtraAccountMetaList,
    TAccountMintTradeCounter,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateTokenWithHookInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountAuthority,
    TAccountPayer,
    TAccountCounterHookProgram,
    TAccountExtraAccountMetaList,
    TAccountMintTradeCounter,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_SETUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    counterHookProgram: {
      value: input.counterHookProgram ?? null,
      isWritable: false,
    },
    extraAccountMetaList: {
      value: input.extraAccountMetaList ?? null,
      isWritable: true,
    },
    mintTradeCounter: {
      value: input.mintTradeCounter ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.extraAccountMetaList.value) {
    accounts.extraAccountMetaList.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            101, 120, 116, 114, 97, 45, 97, 99, 99, 111, 117, 110, 116, 45, 109,
            101, 116, 97, 115,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.mintTradeCounter.value) {
    accounts.mintTradeCounter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 105, 110, 116, 45, 116, 114, 97, 100, 101, 45, 99, 111, 117,
            110, 116, 101, 114,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.counterHookProgram),
      getAccountMeta(accounts.extraAccountMetaList),
      getAccountMeta(accounts.mintTradeCounter),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCreateTokenWithHookInstructionDataEncoder().encode(
      args as CreateTokenWithHookInstructionDataArgs
    ),
  } as CreateTokenWithHookInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountAuthority,
    TAccountPayer,
    TAccountCounterHookProgram,
    TAccountExtraAccountMetaList,
    TAccountMintTradeCounter,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type CreateTokenWithHookInput<
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountCounterHookProgram extends string = string,
  TAccountExtraAccountMetaList extends string = string,
  TAccountMintTradeCounter extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  mint: TransactionSigner<TAccountMint>;
  authority: TransactionSigner<TAccountAuthority>;
  payer: TransactionSigner<TAccountPayer>;
  counterHookProgram: Address<TAccountCounterHookProgram>;
  extraAccountMetaList: Address<TAccountExtraAccountMetaList>;
  mintTradeCounter: Address<TAccountMintTradeCounter>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  name: CreateTokenWithHookInstructionDataArgs['name'];
  symbol: CreateTokenWithHookInstructionDataArgs['symbol'];
  uri: CreateTokenWithHookInstructionDataArgs['uri'];
};

export function getCreateTokenWithHookInstruction<
  TAccountMint extends string,
  TAccountAuthority extends string,
  TAccountPayer extends string,
  TAccountCounterHookProgram extends string,
  TAccountExtraAccountMetaList extends string,
  TAccountMintTradeCounter extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_SETUP_PROGRAM_ADDRESS,
>(
  input: CreateTokenWithHookInput<
    TAccountMint,
    TAccountAuthority,
    TAccountPayer,
    TAccountCounterHookProgram,
    TAccountExtraAccountMetaList,
    TAccountMintTradeCounter,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTokenWithHookInstruction<
  TProgramAddress,
  TAccountMint,
  TAccountAuthority,
  TAccountPayer,
  TAccountCounterHookProgram,
  TAccountExtraAccountMetaList,
  TAccountMintTradeCounter,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_SETUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    counterHookProgram: {
      value: input.counterHookProgram ?? null,
      isWritable: false,
    },
    extraAccountMetaList: {
      value: input.extraAccountMetaList ?? null,
      isWritable: true,
    },
    mintTradeCounter: {
      value: input.mintTradeCounter ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.counterHookProgram),
      getAccountMeta(accounts.extraAccountMetaList),
      getAccountMeta(accounts.mintTradeCounter),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCreateTokenWithHookInstructionDataEncoder().encode(
      args as CreateTokenWithHookInstructionDataArgs
    ),
  } as CreateTokenWithHookInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountAuthority,
    TAccountPayer,
    TAccountCounterHookProgram,
    TAccountExtraAccountMetaList,
    TAccountMintTradeCounter,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedCreateTokenWithHookInstruction<
  TProgram extends string = typeof TOKEN_SETUP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    mint: TAccountMetas[0];
    authority: TAccountMetas[1];
    payer: TAccountMetas[2];
    counterHookProgram: TAccountMetas[3];
    extraAccountMetaList: TAccountMetas[4];
    mintTradeCounter: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
  };
  data: CreateTokenWithHookInstructionData;
};

export function parseCreateTokenWithHookInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateTokenWithHookInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount(),
      authority: getNextAccount(),
      payer: getNextAccount(),
      counterHookProgram: getNextAccount(),
      extraAccountMetaList: getNextAccount(),
      mintTradeCounter: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getCreateTokenWithHookInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
