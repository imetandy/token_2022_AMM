/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TOKEN_SETUP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_EXTRA_ACCOUNT_META_LIST_DISCRIMINATOR = new Uint8Array([
  92, 197, 174, 197, 41, 124, 19, 3,
]);

export function getInitializeExtraAccountMetaListDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_EXTRA_ACCOUNT_META_LIST_DISCRIMINATOR
  );
}

export type InitializeExtraAccountMetaListInstruction<
  TProgram extends string = typeof TOKEN_SETUP_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountExtraAccountMetaList extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountMintTradeCounter extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountExtraAccountMetaList extends string
        ? WritableAccount<TAccountExtraAccountMetaList>
        : TAccountExtraAccountMetaList,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountMintTradeCounter extends string
        ? ReadonlyAccount<TAccountMintTradeCounter>
        : TAccountMintTradeCounter,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeExtraAccountMetaListInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeExtraAccountMetaListInstructionDataArgs = {};

export function getInitializeExtraAccountMetaListInstructionDataEncoder(): Encoder<InitializeExtraAccountMetaListInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_EXTRA_ACCOUNT_META_LIST_DISCRIMINATOR,
    })
  );
}

export function getInitializeExtraAccountMetaListInstructionDataDecoder(): Decoder<InitializeExtraAccountMetaListInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeExtraAccountMetaListInstructionDataCodec(): Codec<
  InitializeExtraAccountMetaListInstructionDataArgs,
  InitializeExtraAccountMetaListInstructionData
> {
  return combineCodec(
    getInitializeExtraAccountMetaListInstructionDataEncoder(),
    getInitializeExtraAccountMetaListInstructionDataDecoder()
  );
}

export type InitializeExtraAccountMetaListAsyncInput<
  TAccountPayer extends string = string,
  TAccountExtraAccountMetaList extends string = string,
  TAccountMint extends string = string,
  TAccountMintTradeCounter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  extraAccountMetaList?: Address<TAccountExtraAccountMetaList>;
  mint: Address<TAccountMint>;
  mintTradeCounter?: Address<TAccountMintTradeCounter>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeExtraAccountMetaListInstructionAsync<
  TAccountPayer extends string,
  TAccountExtraAccountMetaList extends string,
  TAccountMint extends string,
  TAccountMintTradeCounter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_SETUP_PROGRAM_ADDRESS,
>(
  input: InitializeExtraAccountMetaListAsyncInput<
    TAccountPayer,
    TAccountExtraAccountMetaList,
    TAccountMint,
    TAccountMintTradeCounter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeExtraAccountMetaListInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountExtraAccountMetaList,
    TAccountMint,
    TAccountMintTradeCounter,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_SETUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    extraAccountMetaList: {
      value: input.extraAccountMetaList ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    mintTradeCounter: {
      value: input.mintTradeCounter ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.extraAccountMetaList.value) {
    accounts.extraAccountMetaList.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            101, 120, 116, 114, 97, 45, 97, 99, 99, 111, 117, 110, 116, 45, 109,
            101, 116, 97, 115,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.mintTradeCounter.value) {
    accounts.mintTradeCounter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 105, 110, 116, 45, 116, 114, 97, 100, 101, 45, 99, 111, 117,
            110, 116, 101, 114,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.extraAccountMetaList),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.mintTradeCounter),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeExtraAccountMetaListInstructionDataEncoder().encode({}),
  } as InitializeExtraAccountMetaListInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountExtraAccountMetaList,
    TAccountMint,
    TAccountMintTradeCounter,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeExtraAccountMetaListInput<
  TAccountPayer extends string = string,
  TAccountExtraAccountMetaList extends string = string,
  TAccountMint extends string = string,
  TAccountMintTradeCounter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  extraAccountMetaList: Address<TAccountExtraAccountMetaList>;
  mint: Address<TAccountMint>;
  mintTradeCounter: Address<TAccountMintTradeCounter>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeExtraAccountMetaListInstruction<
  TAccountPayer extends string,
  TAccountExtraAccountMetaList extends string,
  TAccountMint extends string,
  TAccountMintTradeCounter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_SETUP_PROGRAM_ADDRESS,
>(
  input: InitializeExtraAccountMetaListInput<
    TAccountPayer,
    TAccountExtraAccountMetaList,
    TAccountMint,
    TAccountMintTradeCounter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeExtraAccountMetaListInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountExtraAccountMetaList,
  TAccountMint,
  TAccountMintTradeCounter,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_SETUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    extraAccountMetaList: {
      value: input.extraAccountMetaList ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    mintTradeCounter: {
      value: input.mintTradeCounter ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.extraAccountMetaList),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.mintTradeCounter),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeExtraAccountMetaListInstructionDataEncoder().encode({}),
  } as InitializeExtraAccountMetaListInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountExtraAccountMetaList,
    TAccountMint,
    TAccountMintTradeCounter,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeExtraAccountMetaListInstruction<
  TProgram extends string = typeof TOKEN_SETUP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    extraAccountMetaList: TAccountMetas[1];
    mint: TAccountMetas[2];
    mintTradeCounter: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeExtraAccountMetaListInstructionData;
};

export function parseInitializeExtraAccountMetaListInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeExtraAccountMetaListInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      extraAccountMetaList: getNextAccount(),
      mint: getNextAccount(),
      mintTradeCounter: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeExtraAccountMetaListInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
