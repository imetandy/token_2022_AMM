/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';

/** InvalidFee: Invalid fee amount */
export const AMM_ERROR__INVALID_FEE = 0x1770; // 6000
/** InvalidAmount: Invalid amount */
export const AMM_ERROR__INVALID_AMOUNT = 0x1771; // 6001
/** InsufficientLiquidity: Insufficient liquidity */
export const AMM_ERROR__INSUFFICIENT_LIQUIDITY = 0x1772; // 6002
/** SlippageExceeded: Slippage exceeded */
export const AMM_ERROR__SLIPPAGE_EXCEEDED = 0x1773; // 6003
/** UnauthorizedAdmin: Unauthorized admin */
export const AMM_ERROR__UNAUTHORIZED_ADMIN = 0x1774; // 6004
/** PoolAlreadyExists: Pool already exists */
export const AMM_ERROR__POOL_ALREADY_EXISTS = 0x1775; // 6005
/** PoolDoesNotExist: Pool does not exist */
export const AMM_ERROR__POOL_DOES_NOT_EXIST = 0x1776; // 6006
/** InvalidPool: Invalid pool */
export const AMM_ERROR__INVALID_POOL = 0x1777; // 6007
/** InvalidMint: Invalid mint */
export const AMM_ERROR__INVALID_MINT = 0x1778; // 6008
/** NotSigner: Not a signer */
export const AMM_ERROR__NOT_SIGNER = 0x1779; // 6009
/** InvalidPoolAuthority: Invalid pool authority */
export const AMM_ERROR__INVALID_POOL_AUTHORITY = 0x177a; // 6010

export type AmmError =
  | typeof AMM_ERROR__INSUFFICIENT_LIQUIDITY
  | typeof AMM_ERROR__INVALID_AMOUNT
  | typeof AMM_ERROR__INVALID_FEE
  | typeof AMM_ERROR__INVALID_MINT
  | typeof AMM_ERROR__INVALID_POOL
  | typeof AMM_ERROR__INVALID_POOL_AUTHORITY
  | typeof AMM_ERROR__NOT_SIGNER
  | typeof AMM_ERROR__POOL_ALREADY_EXISTS
  | typeof AMM_ERROR__POOL_DOES_NOT_EXIST
  | typeof AMM_ERROR__SLIPPAGE_EXCEEDED
  | typeof AMM_ERROR__UNAUTHORIZED_ADMIN;

let ammErrorMessages: Record<AmmError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  ammErrorMessages = {
    [AMM_ERROR__INSUFFICIENT_LIQUIDITY]: `Insufficient liquidity`,
    [AMM_ERROR__INVALID_AMOUNT]: `Invalid amount`,
    [AMM_ERROR__INVALID_FEE]: `Invalid fee amount`,
    [AMM_ERROR__INVALID_MINT]: `Invalid mint`,
    [AMM_ERROR__INVALID_POOL]: `Invalid pool`,
    [AMM_ERROR__INVALID_POOL_AUTHORITY]: `Invalid pool authority`,
    [AMM_ERROR__NOT_SIGNER]: `Not a signer`,
    [AMM_ERROR__POOL_ALREADY_EXISTS]: `Pool already exists`,
    [AMM_ERROR__POOL_DOES_NOT_EXIST]: `Pool does not exist`,
    [AMM_ERROR__SLIPPAGE_EXCEEDED]: `Slippage exceeded`,
    [AMM_ERROR__UNAUTHORIZED_ADMIN]: `Unauthorized admin`,
  };
}

export function getAmmErrorMessage(code: AmmError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (ammErrorMessages as Record<AmmError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isAmmError<TProgramErrorCode extends AmmError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    AMM_PROGRAM_ADDRESS,
    code
  );
}
