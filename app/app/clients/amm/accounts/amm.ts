/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const AMM_DISCRIMINATOR = new Uint8Array([
  143, 245, 200, 17, 74, 214, 196, 135,
]);

export function getAmmDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(AMM_DISCRIMINATOR);
}

export type Amm = {
  discriminator: ReadonlyUint8Array;
  /** The unique pool identifier (fixed size array) */
  poolId: ReadonlyUint8Array;
  /** Account that has admin authority over the AMM */
  admin: Address;
  /** The SOL fee taken on each trade, in lamports (e.g., 0.05 SOL = 50,000,000 lamports) */
  solFee: bigint;
  /** SOL fee collector account */
  solFeeCollector: Address;
  /** The AMM has been created */
  created: boolean;
  /** Whether the AMM is immutable */
  isImmutable: boolean;
};

export type AmmArgs = {
  /** The unique pool identifier (fixed size array) */
  poolId: ReadonlyUint8Array;
  /** Account that has admin authority over the AMM */
  admin: Address;
  /** The SOL fee taken on each trade, in lamports (e.g., 0.05 SOL = 50,000,000 lamports) */
  solFee: number | bigint;
  /** SOL fee collector account */
  solFeeCollector: Address;
  /** The AMM has been created */
  created: boolean;
  /** Whether the AMM is immutable */
  isImmutable: boolean;
};

export function getAmmEncoder(): Encoder<AmmArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['poolId', fixEncoderSize(getBytesEncoder(), 64)],
      ['admin', getAddressEncoder()],
      ['solFee', getU64Encoder()],
      ['solFeeCollector', getAddressEncoder()],
      ['created', getBooleanEncoder()],
      ['isImmutable', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: AMM_DISCRIMINATOR })
  );
}

export function getAmmDecoder(): Decoder<Amm> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['poolId', fixDecoderSize(getBytesDecoder(), 64)],
    ['admin', getAddressDecoder()],
    ['solFee', getU64Decoder()],
    ['solFeeCollector', getAddressDecoder()],
    ['created', getBooleanDecoder()],
    ['isImmutable', getBooleanDecoder()],
  ]);
}

export function getAmmCodec(): Codec<AmmArgs, Amm> {
  return combineCodec(getAmmEncoder(), getAmmDecoder());
}

export function decodeAmm<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Amm, TAddress>;
export function decodeAmm<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Amm, TAddress>;
export function decodeAmm<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Amm, TAddress> | MaybeAccount<Amm, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAmmDecoder()
  );
}

export async function fetchAmm<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Amm, TAddress>> {
  const maybeAccount = await fetchMaybeAmm(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAmm<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Amm, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAmm(maybeAccount);
}

export async function fetchAllAmm(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Amm>[]> {
  const maybeAccounts = await fetchAllMaybeAmm(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAmm(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Amm>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAmm(maybeAccount));
}

export function getAmmSize(): number {
  return 146;
}
