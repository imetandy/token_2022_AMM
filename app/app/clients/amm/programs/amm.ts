/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateAmmInstruction,
  type ParsedCreatePoolInstruction,
  type ParsedCreatePoolTokenAccountsInstruction,
  type ParsedDepositLiquidityInstruction,
  type ParsedSwapInstruction,
  type ParsedUpdateAdminInstruction,
  type ParsedUpdateFeeInstruction,
} from '../instructions';

export const AMM_PROGRAM_ADDRESS =
  'H7dswT3BXcCEeVjjLWkfpBP2p5imuJy7Qaq9i5VCpoos' as Address<'H7dswT3BXcCEeVjjLWkfpBP2p5imuJy7Qaq9i5VCpoos'>;

export enum AmmAccount {
  Amm,
  Pool,
}

export function identifyAmmAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AmmAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([143, 245, 200, 17, 74, 214, 196, 135])
      ),
      0
    )
  ) {
    return AmmAccount.Amm;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188])
      ),
      0
    )
  ) {
    return AmmAccount.Pool;
  }
  throw new Error(
    'The provided account could not be identified as a amm account.'
  );
}

export enum AmmInstruction {
  CreateAmm,
  CreatePool,
  CreatePoolTokenAccounts,
  DepositLiquidity,
  Swap,
  UpdateAdmin,
  UpdateFee,
}

export function identifyAmmInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AmmInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 91, 21, 170, 5, 68, 125, 64])
      ),
      0
    )
  ) {
    return AmmInstruction.CreateAmm;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([233, 146, 209, 142, 207, 104, 64, 188])
      ),
      0
    )
  ) {
    return AmmInstruction.CreatePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 90, 65, 202, 12, 119, 182, 213])
      ),
      0
    )
  ) {
    return AmmInstruction.CreatePoolTokenAccounts;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([245, 99, 59, 25, 151, 71, 233, 249])
      ),
      0
    )
  ) {
    return AmmInstruction.DepositLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([248, 198, 158, 145, 225, 117, 135, 200])
      ),
      0
    )
  ) {
    return AmmInstruction.Swap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([161, 176, 40, 213, 60, 184, 179, 228])
      ),
      0
    )
  ) {
    return AmmInstruction.UpdateAdmin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([232, 253, 195, 247, 148, 212, 73, 222])
      ),
      0
    )
  ) {
    return AmmInstruction.UpdateFee;
  }
  throw new Error(
    'The provided instruction could not be identified as a amm instruction.'
  );
}

export type ParsedAmmInstruction<
  TProgram extends string = 'H7dswT3BXcCEeVjjLWkfpBP2p5imuJy7Qaq9i5VCpoos',
> =
  | ({
      instructionType: AmmInstruction.CreateAmm;
    } & ParsedCreateAmmInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.CreatePool;
    } & ParsedCreatePoolInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.CreatePoolTokenAccounts;
    } & ParsedCreatePoolTokenAccountsInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.DepositLiquidity;
    } & ParsedDepositLiquidityInstruction<TProgram>)
  | ({ instructionType: AmmInstruction.Swap } & ParsedSwapInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.UpdateAdmin;
    } & ParsedUpdateAdminInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.UpdateFee;
    } & ParsedUpdateFeeInstruction<TProgram>);
