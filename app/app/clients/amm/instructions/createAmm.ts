/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_AMM_DISCRIMINATOR = new Uint8Array([
  242, 91, 21, 170, 5, 68, 125, 64,
]);

export function getCreateAmmDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_AMM_DISCRIMINATOR);
}

export type CreateAmmInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountAmm extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountSolFeeCollector extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAmm extends string ? WritableAccount<TAccountAmm> : TAccountAmm,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountSolFeeCollector extends string
        ? ReadonlyAccount<TAccountSolFeeCollector>
        : TAccountSolFeeCollector,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateAmmInstructionData = {
  discriminator: ReadonlyUint8Array;
  mintA: Address;
  mintB: Address;
  solFee: bigint;
  solFeeCollector: Address;
};

export type CreateAmmInstructionDataArgs = {
  mintA: Address;
  mintB: Address;
  solFee: number | bigint;
  solFeeCollector: Address;
};

export function getCreateAmmInstructionDataEncoder(): Encoder<CreateAmmInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['mintA', getAddressEncoder()],
      ['mintB', getAddressEncoder()],
      ['solFee', getU64Encoder()],
      ['solFeeCollector', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_AMM_DISCRIMINATOR })
  );
}

export function getCreateAmmInstructionDataDecoder(): Decoder<CreateAmmInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['mintA', getAddressDecoder()],
    ['mintB', getAddressDecoder()],
    ['solFee', getU64Decoder()],
    ['solFeeCollector', getAddressDecoder()],
  ]);
}

export function getCreateAmmInstructionDataCodec(): Codec<
  CreateAmmInstructionDataArgs,
  CreateAmmInstructionData
> {
  return combineCodec(
    getCreateAmmInstructionDataEncoder(),
    getCreateAmmInstructionDataDecoder()
  );
}

export type CreateAmmAsyncInput<
  TAccountAmm extends string = string,
  TAccountAdmin extends string = string,
  TAccountSolFeeCollector extends string = string,
  TAccountAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  amm?: Address<TAccountAmm>;
  /** The admin of the AMM */
  admin: TransactionSigner<TAccountAdmin>;
  /** SOL fee collector account */
  solFeeCollector: Address<TAccountSolFeeCollector>;
  authority: TransactionSigner<TAccountAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  systemProgram?: Address<TAccountSystemProgram>;
  mintAArg: CreateAmmInstructionDataArgs['mintA'];
  mintBArg: CreateAmmInstructionDataArgs['mintB'];
  solFee: CreateAmmInstructionDataArgs['solFee'];
  solFeeCollectorArg: CreateAmmInstructionDataArgs['solFeeCollector'];
};

export async function getCreateAmmInstructionAsync<
  TAccountAmm extends string,
  TAccountAdmin extends string,
  TAccountSolFeeCollector extends string,
  TAccountAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateAmmAsyncInput<
    TAccountAmm,
    TAccountAdmin,
    TAccountSolFeeCollector,
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateAmmInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountAdmin,
    TAccountSolFeeCollector,
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    amm: { value: input.amm ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    solFeeCollector: {
      value: input.solFeeCollector ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = {
    ...input,
    mintA: input.mintAArg,
    mintB: input.mintBArg,
    solFeeCollector: input.solFeeCollectorArg,
  };

  // Resolve default values.
  if (!accounts.amm.value) {
    accounts.amm.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 109, 109])),
        getAddressEncoder().encode(expectSome(args.mintA)),
        getAddressEncoder().encode(expectSome(args.mintB)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.solFeeCollector),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateAmmInstructionDataEncoder().encode(
      args as CreateAmmInstructionDataArgs
    ),
  } as CreateAmmInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountAdmin,
    TAccountSolFeeCollector,
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateAmmInput<
  TAccountAmm extends string = string,
  TAccountAdmin extends string = string,
  TAccountSolFeeCollector extends string = string,
  TAccountAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  amm: Address<TAccountAmm>;
  /** The admin of the AMM */
  admin: TransactionSigner<TAccountAdmin>;
  /** SOL fee collector account */
  solFeeCollector: Address<TAccountSolFeeCollector>;
  authority: TransactionSigner<TAccountAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  systemProgram?: Address<TAccountSystemProgram>;
  mintAArg: CreateAmmInstructionDataArgs['mintA'];
  mintBArg: CreateAmmInstructionDataArgs['mintB'];
  solFee: CreateAmmInstructionDataArgs['solFee'];
  solFeeCollectorArg: CreateAmmInstructionDataArgs['solFeeCollector'];
};

export function getCreateAmmInstruction<
  TAccountAmm extends string,
  TAccountAdmin extends string,
  TAccountSolFeeCollector extends string,
  TAccountAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateAmmInput<
    TAccountAmm,
    TAccountAdmin,
    TAccountSolFeeCollector,
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateAmmInstruction<
  TProgramAddress,
  TAccountAmm,
  TAccountAdmin,
  TAccountSolFeeCollector,
  TAccountAuthority,
  TAccountMintA,
  TAccountMintB,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    amm: { value: input.amm ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    solFeeCollector: {
      value: input.solFeeCollector ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = {
    ...input,
    mintA: input.mintAArg,
    mintB: input.mintBArg,
    solFeeCollector: input.solFeeCollectorArg,
  };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.solFeeCollector),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateAmmInstructionDataEncoder().encode(
      args as CreateAmmInstructionDataArgs
    ),
  } as CreateAmmInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountAdmin,
    TAccountSolFeeCollector,
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateAmmInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    amm: TAccountMetas[0];
    /** The admin of the AMM */
    admin: TAccountMetas[1];
    /** SOL fee collector account */
    solFeeCollector: TAccountMetas[2];
    authority: TAccountMetas[3];
    mintA: TAccountMetas[4];
    mintB: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: CreateAmmInstructionData;
};

export function parseCreateAmmInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateAmmInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      amm: getNextAccount(),
      admin: getNextAccount(),
      solFeeCollector: getNextAccount(),
      authority: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateAmmInstructionDataDecoder().decode(instruction.data),
  };
}
