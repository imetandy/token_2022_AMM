/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_POOL_TOKEN_ACCOUNTS_DISCRIMINATOR = new Uint8Array([
  121, 90, 65, 202, 12, 119, 182, 213,
]);

export function getCreatePoolTokenAccountsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_POOL_TOKEN_ACCOUNTS_DISCRIMINATOR
  );
}

export type CreatePoolTokenAccountsInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountAmm extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountPoolAccountA extends string | IAccountMeta<string> = string,
  TAccountPoolAccountB extends string | IAccountMeta<string> = string,
  TAccountPoolLpAccount extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAmm extends string ? ReadonlyAccount<TAccountAmm> : TAccountAmm,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountLpMint extends string
        ? ReadonlyAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountPoolAccountA extends string
        ? WritableAccount<TAccountPoolAccountA>
        : TAccountPoolAccountA,
      TAccountPoolAccountB extends string
        ? WritableAccount<TAccountPoolAccountB>
        : TAccountPoolAccountB,
      TAccountPoolLpAccount extends string
        ? WritableAccount<TAccountPoolLpAccount>
        : TAccountPoolLpAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreatePoolTokenAccountsInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CreatePoolTokenAccountsInstructionDataArgs = {};

export function getCreatePoolTokenAccountsInstructionDataEncoder(): Encoder<CreatePoolTokenAccountsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CREATE_POOL_TOKEN_ACCOUNTS_DISCRIMINATOR,
    })
  );
}

export function getCreatePoolTokenAccountsInstructionDataDecoder(): Decoder<CreatePoolTokenAccountsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCreatePoolTokenAccountsInstructionDataCodec(): Codec<
  CreatePoolTokenAccountsInstructionDataArgs,
  CreatePoolTokenAccountsInstructionData
> {
  return combineCodec(
    getCreatePoolTokenAccountsInstructionDataEncoder(),
    getCreatePoolTokenAccountsInstructionDataDecoder()
  );
}

export type CreatePoolTokenAccountsAsyncInput<
  TAccountPayer extends string = string,
  TAccountAmm extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountLpMint extends string = string,
  TAccountPoolAccountA extends string = string,
  TAccountPoolAccountB extends string = string,
  TAccountPoolLpAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** The account paying for the transaction */
  payer: TransactionSigner<TAccountPayer>;
  amm?: Address<TAccountAmm>;
  pool?: Address<TAccountPool>;
  poolAuthority?: Address<TAccountPoolAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  lpMint: Address<TAccountLpMint>;
  poolAccountA?: Address<TAccountPoolAccountA>;
  poolAccountB?: Address<TAccountPoolAccountB>;
  poolLpAccount?: Address<TAccountPoolLpAccount>;
  /** Solana ecosystem accounts */
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export async function getCreatePoolTokenAccountsInstructionAsync<
  TAccountPayer extends string,
  TAccountAmm extends string,
  TAccountPool extends string,
  TAccountPoolAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountLpMint extends string,
  TAccountPoolAccountA extends string,
  TAccountPoolAccountB extends string,
  TAccountPoolLpAccount extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreatePoolTokenAccountsAsyncInput<
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountLpMint,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountPoolLpAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreatePoolTokenAccountsInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountLpMint,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountPoolLpAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    amm: { value: input.amm ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: false },
    poolAccountA: { value: input.poolAccountA ?? null, isWritable: true },
    poolAccountB: { value: input.poolAccountB ?? null, isWritable: true },
    poolLpAccount: { value: input.poolLpAccount ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.amm.value) {
    accounts.amm.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 109, 109])),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.pool.value) {
    accounts.pool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.amm.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.poolAccountA.value) {
    accounts.poolAccountA.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.poolAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.poolAccountB.value) {
    accounts.poolAccountB.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.poolAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.poolLpAccount.value) {
    accounts.poolLpAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.poolAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.lpMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.poolAccountA),
      getAccountMeta(accounts.poolAccountB),
      getAccountMeta(accounts.poolLpAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCreatePoolTokenAccountsInstructionDataEncoder().encode({}),
  } as CreatePoolTokenAccountsInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountLpMint,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountPoolLpAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type CreatePoolTokenAccountsInput<
  TAccountPayer extends string = string,
  TAccountAmm extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountLpMint extends string = string,
  TAccountPoolAccountA extends string = string,
  TAccountPoolAccountB extends string = string,
  TAccountPoolLpAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** The account paying for the transaction */
  payer: TransactionSigner<TAccountPayer>;
  amm: Address<TAccountAmm>;
  pool: Address<TAccountPool>;
  poolAuthority: Address<TAccountPoolAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  lpMint: Address<TAccountLpMint>;
  poolAccountA: Address<TAccountPoolAccountA>;
  poolAccountB: Address<TAccountPoolAccountB>;
  poolLpAccount: Address<TAccountPoolLpAccount>;
  /** Solana ecosystem accounts */
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getCreatePoolTokenAccountsInstruction<
  TAccountPayer extends string,
  TAccountAmm extends string,
  TAccountPool extends string,
  TAccountPoolAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountLpMint extends string,
  TAccountPoolAccountA extends string,
  TAccountPoolAccountB extends string,
  TAccountPoolLpAccount extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreatePoolTokenAccountsInput<
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountLpMint,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountPoolLpAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreatePoolTokenAccountsInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAmm,
  TAccountPool,
  TAccountPoolAuthority,
  TAccountMintA,
  TAccountMintB,
  TAccountLpMint,
  TAccountPoolAccountA,
  TAccountPoolAccountB,
  TAccountPoolLpAccount,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    amm: { value: input.amm ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: false },
    poolAccountA: { value: input.poolAccountA ?? null, isWritable: true },
    poolAccountB: { value: input.poolAccountB ?? null, isWritable: true },
    poolLpAccount: { value: input.poolLpAccount ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.poolAccountA),
      getAccountMeta(accounts.poolAccountB),
      getAccountMeta(accounts.poolLpAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCreatePoolTokenAccountsInstructionDataEncoder().encode({}),
  } as CreatePoolTokenAccountsInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountLpMint,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountPoolLpAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCreatePoolTokenAccountsInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The account paying for the transaction */
    payer: TAccountMetas[0];
    amm: TAccountMetas[1];
    pool: TAccountMetas[2];
    poolAuthority: TAccountMetas[3];
    mintA: TAccountMetas[4];
    mintB: TAccountMetas[5];
    lpMint: TAccountMetas[6];
    poolAccountA: TAccountMetas[7];
    poolAccountB: TAccountMetas[8];
    poolLpAccount: TAccountMetas[9];
    /** Solana ecosystem accounts */
    systemProgram: TAccountMetas[10];
    associatedTokenProgram: TAccountMetas[11];
    tokenProgram: TAccountMetas[12];
  };
  data: CreatePoolTokenAccountsInstructionData;
};

export function parseCreatePoolTokenAccountsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreatePoolTokenAccountsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      amm: getNextAccount(),
      pool: getNextAccount(),
      poolAuthority: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      lpMint: getNextAccount(),
      poolAccountA: getNextAccount(),
      poolAccountB: getNextAccount(),
      poolLpAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCreatePoolTokenAccountsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
