/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_POOL_DISCRIMINATOR = new Uint8Array([
  233, 146, 209, 142, 207, 104, 64, 188,
]);

export function getCreatePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_POOL_DISCRIMINATOR);
}

export type CreatePoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountAmm extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountMintLiquidity extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAmm extends string ? ReadonlyAccount<TAccountAmm> : TAccountAmm,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountMintLiquidity extends string
        ? WritableSignerAccount<TAccountMintLiquidity> &
            IAccountSignerMeta<TAccountMintLiquidity>
        : TAccountMintLiquidity,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreatePoolInstructionData = { discriminator: ReadonlyUint8Array };

export type CreatePoolInstructionDataArgs = {};

export function getCreatePoolInstructionDataEncoder(): Encoder<CreatePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CREATE_POOL_DISCRIMINATOR })
  );
}

export function getCreatePoolInstructionDataDecoder(): Decoder<CreatePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCreatePoolInstructionDataCodec(): Codec<
  CreatePoolInstructionDataArgs,
  CreatePoolInstructionData
> {
  return combineCodec(
    getCreatePoolInstructionDataEncoder(),
    getCreatePoolInstructionDataDecoder()
  );
}

export type CreatePoolAsyncInput<
  TAccountPayer extends string = string,
  TAccountAmm extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountMintLiquidity extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** The account paying for all rents */
  payer: TransactionSigner<TAccountPayer>;
  amm?: Address<TAccountAmm>;
  pool?: Address<TAccountPool>;
  poolAuthority?: Address<TAccountPoolAuthority>;
  mintLiquidity: TransactionSigner<TAccountMintLiquidity>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  /** Solana ecosystem accounts */
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export async function getCreatePoolInstructionAsync<
  TAccountPayer extends string,
  TAccountAmm extends string,
  TAccountPool extends string,
  TAccountPoolAuthority extends string,
  TAccountMintLiquidity extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreatePoolAsyncInput<
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintLiquidity,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreatePoolInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintLiquidity,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    amm: { value: input.amm ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    mintLiquidity: { value: input.mintLiquidity ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.amm.value) {
    accounts.amm.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 109, 109])),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.pool.value) {
    accounts.pool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.amm.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.mintLiquidity),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCreatePoolInstructionDataEncoder().encode({}),
  } as CreatePoolInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintLiquidity,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type CreatePoolInput<
  TAccountPayer extends string = string,
  TAccountAmm extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountMintLiquidity extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** The account paying for all rents */
  payer: TransactionSigner<TAccountPayer>;
  amm: Address<TAccountAmm>;
  pool: Address<TAccountPool>;
  poolAuthority: Address<TAccountPoolAuthority>;
  mintLiquidity: TransactionSigner<TAccountMintLiquidity>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  /** Solana ecosystem accounts */
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getCreatePoolInstruction<
  TAccountPayer extends string,
  TAccountAmm extends string,
  TAccountPool extends string,
  TAccountPoolAuthority extends string,
  TAccountMintLiquidity extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreatePoolInput<
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintLiquidity,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreatePoolInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAmm,
  TAccountPool,
  TAccountPoolAuthority,
  TAccountMintLiquidity,
  TAccountMintA,
  TAccountMintB,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    amm: { value: input.amm ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    mintLiquidity: { value: input.mintLiquidity ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.mintLiquidity),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCreatePoolInstructionDataEncoder().encode({}),
  } as CreatePoolInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintLiquidity,
    TAccountMintA,
    TAccountMintB,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCreatePoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The account paying for all rents */
    payer: TAccountMetas[0];
    amm: TAccountMetas[1];
    pool: TAccountMetas[2];
    poolAuthority: TAccountMetas[3];
    mintLiquidity: TAccountMetas[4];
    mintA: TAccountMetas[5];
    mintB: TAccountMetas[6];
    /** Solana ecosystem accounts */
    systemProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
  };
  data: CreatePoolInstructionData;
};

export function parseCreatePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreatePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      amm: getNextAccount(),
      pool: getNextAccount(),
      poolAuthority: getNextAccount(),
      mintLiquidity: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCreatePoolInstructionDataDecoder().decode(instruction.data),
  };
}
