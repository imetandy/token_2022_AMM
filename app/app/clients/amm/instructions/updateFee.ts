/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_FEE_DISCRIMINATOR = new Uint8Array([
  232, 253, 195, 247, 148, 212, 73, 222,
]);

export function getUpdateFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UPDATE_FEE_DISCRIMINATOR);
}

export type UpdateFeeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountAmm extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAmm extends string ? WritableAccount<TAccountAmm> : TAccountAmm,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
  newSolFee: bigint;
};

export type UpdateFeeInstructionDataArgs = { newSolFee: number | bigint };

export function getUpdateFeeInstructionDataEncoder(): Encoder<UpdateFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newSolFee', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_FEE_DISCRIMINATOR })
  );
}

export function getUpdateFeeInstructionDataDecoder(): Decoder<UpdateFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newSolFee', getU64Decoder()],
  ]);
}

export function getUpdateFeeInstructionDataCodec(): Codec<
  UpdateFeeInstructionDataArgs,
  UpdateFeeInstructionData
> {
  return combineCodec(
    getUpdateFeeInstructionDataEncoder(),
    getUpdateFeeInstructionDataDecoder()
  );
}

export type UpdateFeeAsyncInput<
  TAccountAmm extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountAdmin extends string = string,
> = {
  amm?: Address<TAccountAmm>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  admin: TransactionSigner<TAccountAdmin>;
  newSolFee: UpdateFeeInstructionDataArgs['newSolFee'];
};

export async function getUpdateFeeInstructionAsync<
  TAccountAmm extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: UpdateFeeAsyncInput<
    TAccountAmm,
    TAccountMintA,
    TAccountMintB,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateFeeInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountMintA,
    TAccountMintB,
    TAccountAdmin
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    amm: { value: input.amm ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.amm.value) {
    accounts.amm.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 109, 109])),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getUpdateFeeInstructionDataEncoder().encode(
      args as UpdateFeeInstructionDataArgs
    ),
  } as UpdateFeeInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountMintA,
    TAccountMintB,
    TAccountAdmin
  >;

  return instruction;
}

export type UpdateFeeInput<
  TAccountAmm extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountAdmin extends string = string,
> = {
  amm: Address<TAccountAmm>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  admin: TransactionSigner<TAccountAdmin>;
  newSolFee: UpdateFeeInstructionDataArgs['newSolFee'];
};

export function getUpdateFeeInstruction<
  TAccountAmm extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: UpdateFeeInput<
    TAccountAmm,
    TAccountMintA,
    TAccountMintB,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateFeeInstruction<
  TProgramAddress,
  TAccountAmm,
  TAccountMintA,
  TAccountMintB,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    amm: { value: input.amm ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getUpdateFeeInstructionDataEncoder().encode(
      args as UpdateFeeInstructionDataArgs
    ),
  } as UpdateFeeInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountMintA,
    TAccountMintB,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedUpdateFeeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    amm: TAccountMetas[0];
    mintA: TAccountMetas[1];
    mintB: TAccountMetas[2];
    admin: TAccountMetas[3];
  };
  data: UpdateFeeInstructionData;
};

export function parseUpdateFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      amm: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getUpdateFeeInstructionDataDecoder().decode(instruction.data),
  };
}
