/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SWAP_DISCRIMINATOR = new Uint8Array([
  248, 198, 158, 145, 225, 117, 135, 200,
]);

export function getSwapDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP_DISCRIMINATOR);
}

export type SwapInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountAmm extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountPoolAccountA extends string | IAccountMeta<string> = string,
  TAccountPoolAccountB extends string | IAccountMeta<string> = string,
  TAccountUserAccountA extends string | IAccountMeta<string> = string,
  TAccountUserAccountB extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountExtraAccountMetaListA extends string | IAccountMeta<string> = string,
  TAccountMintTradeCounterA extends string | IAccountMeta<string> = string,
  TAccountExtraAccountMetaListB extends string | IAccountMeta<string> = string,
  TAccountMintTradeCounterB extends string | IAccountMeta<string> = string,
  TAccountTransferHookProgramA extends string | IAccountMeta<string> = string,
  TAccountTransferHookProgramB extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAmm extends string ? ReadonlyAccount<TAccountAmm> : TAccountAmm,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountPoolAccountA extends string
        ? WritableAccount<TAccountPoolAccountA>
        : TAccountPoolAccountA,
      TAccountPoolAccountB extends string
        ? WritableAccount<TAccountPoolAccountB>
        : TAccountPoolAccountB,
      TAccountUserAccountA extends string
        ? WritableAccount<TAccountUserAccountA>
        : TAccountUserAccountA,
      TAccountUserAccountB extends string
        ? WritableAccount<TAccountUserAccountB>
        : TAccountUserAccountB,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountExtraAccountMetaListA extends string
        ? ReadonlyAccount<TAccountExtraAccountMetaListA>
        : TAccountExtraAccountMetaListA,
      TAccountMintTradeCounterA extends string
        ? WritableAccount<TAccountMintTradeCounterA>
        : TAccountMintTradeCounterA,
      TAccountExtraAccountMetaListB extends string
        ? ReadonlyAccount<TAccountExtraAccountMetaListB>
        : TAccountExtraAccountMetaListB,
      TAccountMintTradeCounterB extends string
        ? WritableAccount<TAccountMintTradeCounterB>
        : TAccountMintTradeCounterB,
      TAccountTransferHookProgramA extends string
        ? ReadonlyAccount<TAccountTransferHookProgramA>
        : TAccountTransferHookProgramA,
      TAccountTransferHookProgramB extends string
        ? ReadonlyAccount<TAccountTransferHookProgramB>
        : TAccountTransferHookProgramB,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = {
  discriminator: ReadonlyUint8Array;
  swapA: boolean;
  inputAmount: bigint;
  minOutputAmount: bigint;
};

export type SwapInstructionDataArgs = {
  swapA: boolean;
  inputAmount: number | bigint;
  minOutputAmount: number | bigint;
};

export function getSwapInstructionDataEncoder(): Encoder<SwapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['swapA', getBooleanEncoder()],
      ['inputAmount', getU64Encoder()],
      ['minOutputAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP_DISCRIMINATOR })
  );
}

export function getSwapInstructionDataDecoder(): Decoder<SwapInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['swapA', getBooleanDecoder()],
    ['inputAmount', getU64Decoder()],
    ['minOutputAmount', getU64Decoder()],
  ]);
}

export function getSwapInstructionDataCodec(): Codec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapAsyncInput<
  TAccountAmm extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountPoolAccountA extends string = string,
  TAccountPoolAccountB extends string = string,
  TAccountUserAccountA extends string = string,
  TAccountUserAccountB extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountExtraAccountMetaListA extends string = string,
  TAccountMintTradeCounterA extends string = string,
  TAccountExtraAccountMetaListB extends string = string,
  TAccountMintTradeCounterB extends string = string,
  TAccountTransferHookProgramA extends string = string,
  TAccountTransferHookProgramB extends string = string,
> = {
  amm?: Address<TAccountAmm>;
  pool?: Address<TAccountPool>;
  poolAuthority?: Address<TAccountPoolAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  poolAccountA?: Address<TAccountPoolAccountA>;
  poolAccountB?: Address<TAccountPoolAccountB>;
  userAccountA?: Address<TAccountUserAccountA>;
  userAccountB?: Address<TAccountUserAccountB>;
  user: TransactionSigner<TAccountUser>;
  /** Solana ecosystem accounts */
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Transfer hook accounts for mint A */
  extraAccountMetaListA: Address<TAccountExtraAccountMetaListA>;
  mintTradeCounterA: Address<TAccountMintTradeCounterA>;
  /** Transfer hook accounts for mint B */
  extraAccountMetaListB: Address<TAccountExtraAccountMetaListB>;
  mintTradeCounterB: Address<TAccountMintTradeCounterB>;
  transferHookProgramA: Address<TAccountTransferHookProgramA>;
  transferHookProgramB: Address<TAccountTransferHookProgramB>;
  swapA: SwapInstructionDataArgs['swapA'];
  inputAmount: SwapInstructionDataArgs['inputAmount'];
  minOutputAmount: SwapInstructionDataArgs['minOutputAmount'];
};

export async function getSwapInstructionAsync<
  TAccountAmm extends string,
  TAccountPool extends string,
  TAccountPoolAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountPoolAccountA extends string,
  TAccountPoolAccountB extends string,
  TAccountUserAccountA extends string,
  TAccountUserAccountB extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountExtraAccountMetaListA extends string,
  TAccountMintTradeCounterA extends string,
  TAccountExtraAccountMetaListB extends string,
  TAccountMintTradeCounterB extends string,
  TAccountTransferHookProgramA extends string,
  TAccountTransferHookProgramB extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: SwapAsyncInput<
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SwapInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    amm: { value: input.amm ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    poolAccountA: { value: input.poolAccountA ?? null, isWritable: true },
    poolAccountB: { value: input.poolAccountB ?? null, isWritable: true },
    userAccountA: { value: input.userAccountA ?? null, isWritable: true },
    userAccountB: { value: input.userAccountB ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    extraAccountMetaListA: {
      value: input.extraAccountMetaListA ?? null,
      isWritable: false,
    },
    mintTradeCounterA: {
      value: input.mintTradeCounterA ?? null,
      isWritable: true,
    },
    extraAccountMetaListB: {
      value: input.extraAccountMetaListB ?? null,
      isWritable: false,
    },
    mintTradeCounterB: {
      value: input.mintTradeCounterB ?? null,
      isWritable: true,
    },
    transferHookProgramA: {
      value: input.transferHookProgramA ?? null,
      isWritable: false,
    },
    transferHookProgramB: {
      value: input.transferHookProgramB ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.amm.value) {
    accounts.amm.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 109, 109])),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.pool.value) {
    accounts.pool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.amm.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.poolAccountA.value) {
    accounts.poolAccountA.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.poolAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.poolAccountB.value) {
    accounts.poolAccountB.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.poolAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.userAccountA.value) {
    accounts.userAccountA.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.userAccountB.value) {
    accounts.userAccountB.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.poolAccountA),
      getAccountMeta(accounts.poolAccountB),
      getAccountMeta(accounts.userAccountA),
      getAccountMeta(accounts.userAccountB),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.extraAccountMetaListA),
      getAccountMeta(accounts.mintTradeCounterA),
      getAccountMeta(accounts.extraAccountMetaListB),
      getAccountMeta(accounts.mintTradeCounterB),
      getAccountMeta(accounts.transferHookProgramA),
      getAccountMeta(accounts.transferHookProgramB),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >;

  return instruction;
}

export type SwapInput<
  TAccountAmm extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountPoolAccountA extends string = string,
  TAccountPoolAccountB extends string = string,
  TAccountUserAccountA extends string = string,
  TAccountUserAccountB extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountExtraAccountMetaListA extends string = string,
  TAccountMintTradeCounterA extends string = string,
  TAccountExtraAccountMetaListB extends string = string,
  TAccountMintTradeCounterB extends string = string,
  TAccountTransferHookProgramA extends string = string,
  TAccountTransferHookProgramB extends string = string,
> = {
  amm: Address<TAccountAmm>;
  pool: Address<TAccountPool>;
  poolAuthority: Address<TAccountPoolAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  poolAccountA: Address<TAccountPoolAccountA>;
  poolAccountB: Address<TAccountPoolAccountB>;
  userAccountA: Address<TAccountUserAccountA>;
  userAccountB: Address<TAccountUserAccountB>;
  user: TransactionSigner<TAccountUser>;
  /** Solana ecosystem accounts */
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Transfer hook accounts for mint A */
  extraAccountMetaListA: Address<TAccountExtraAccountMetaListA>;
  mintTradeCounterA: Address<TAccountMintTradeCounterA>;
  /** Transfer hook accounts for mint B */
  extraAccountMetaListB: Address<TAccountExtraAccountMetaListB>;
  mintTradeCounterB: Address<TAccountMintTradeCounterB>;
  transferHookProgramA: Address<TAccountTransferHookProgramA>;
  transferHookProgramB: Address<TAccountTransferHookProgramB>;
  swapA: SwapInstructionDataArgs['swapA'];
  inputAmount: SwapInstructionDataArgs['inputAmount'];
  minOutputAmount: SwapInstructionDataArgs['minOutputAmount'];
};

export function getSwapInstruction<
  TAccountAmm extends string,
  TAccountPool extends string,
  TAccountPoolAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountPoolAccountA extends string,
  TAccountPoolAccountB extends string,
  TAccountUserAccountA extends string,
  TAccountUserAccountB extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountExtraAccountMetaListA extends string,
  TAccountMintTradeCounterA extends string,
  TAccountExtraAccountMetaListB extends string,
  TAccountMintTradeCounterB extends string,
  TAccountTransferHookProgramA extends string,
  TAccountTransferHookProgramB extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: SwapInput<
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >,
  config?: { programAddress?: TProgramAddress }
): SwapInstruction<
  TProgramAddress,
  TAccountAmm,
  TAccountPool,
  TAccountPoolAuthority,
  TAccountMintA,
  TAccountMintB,
  TAccountPoolAccountA,
  TAccountPoolAccountB,
  TAccountUserAccountA,
  TAccountUserAccountB,
  TAccountUser,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountExtraAccountMetaListA,
  TAccountMintTradeCounterA,
  TAccountExtraAccountMetaListB,
  TAccountMintTradeCounterB,
  TAccountTransferHookProgramA,
  TAccountTransferHookProgramB
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    amm: { value: input.amm ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    poolAccountA: { value: input.poolAccountA ?? null, isWritable: true },
    poolAccountB: { value: input.poolAccountB ?? null, isWritable: true },
    userAccountA: { value: input.userAccountA ?? null, isWritable: true },
    userAccountB: { value: input.userAccountB ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    extraAccountMetaListA: {
      value: input.extraAccountMetaListA ?? null,
      isWritable: false,
    },
    mintTradeCounterA: {
      value: input.mintTradeCounterA ?? null,
      isWritable: true,
    },
    extraAccountMetaListB: {
      value: input.extraAccountMetaListB ?? null,
      isWritable: false,
    },
    mintTradeCounterB: {
      value: input.mintTradeCounterB ?? null,
      isWritable: true,
    },
    transferHookProgramA: {
      value: input.transferHookProgramA ?? null,
      isWritable: false,
    },
    transferHookProgramB: {
      value: input.transferHookProgramB ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.poolAccountA),
      getAccountMeta(accounts.poolAccountB),
      getAccountMeta(accounts.userAccountA),
      getAccountMeta(accounts.userAccountB),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.extraAccountMetaListA),
      getAccountMeta(accounts.mintTradeCounterA),
      getAccountMeta(accounts.extraAccountMetaListB),
      getAccountMeta(accounts.mintTradeCounterB),
      getAccountMeta(accounts.transferHookProgramA),
      getAccountMeta(accounts.transferHookProgramB),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >;

  return instruction;
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    amm: TAccountMetas[0];
    pool: TAccountMetas[1];
    poolAuthority: TAccountMetas[2];
    mintA: TAccountMetas[3];
    mintB: TAccountMetas[4];
    poolAccountA: TAccountMetas[5];
    poolAccountB: TAccountMetas[6];
    userAccountA: TAccountMetas[7];
    userAccountB: TAccountMetas[8];
    user: TAccountMetas[9];
    /** Solana ecosystem accounts */
    systemProgram: TAccountMetas[10];
    associatedTokenProgram: TAccountMetas[11];
    tokenProgram: TAccountMetas[12];
    /** Transfer hook accounts for mint A */
    extraAccountMetaListA: TAccountMetas[13];
    mintTradeCounterA: TAccountMetas[14];
    /** Transfer hook accounts for mint B */
    extraAccountMetaListB: TAccountMetas[15];
    mintTradeCounterB: TAccountMetas[16];
    transferHookProgramA: TAccountMetas[17];
    transferHookProgramB: TAccountMetas[18];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 19) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      amm: getNextAccount(),
      pool: getNextAccount(),
      poolAuthority: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      poolAccountA: getNextAccount(),
      poolAccountB: getNextAccount(),
      userAccountA: getNextAccount(),
      userAccountB: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      extraAccountMetaListA: getNextAccount(),
      mintTradeCounterA: getNextAccount(),
      extraAccountMetaListB: getNextAccount(),
      mintTradeCounterB: getNextAccount(),
      transferHookProgramA: getNextAccount(),
      transferHookProgramB: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}
