/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DEPOSIT_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  245, 99, 59, 25, 151, 71, 233, 249,
]);

export function getDepositLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_LIQUIDITY_DISCRIMINATOR
  );
}

export type DepositLiquidityInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountAmm extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountPoolAccountA extends string | IAccountMeta<string> = string,
  TAccountPoolAccountB extends string | IAccountMeta<string> = string,
  TAccountUserAccountA extends string | IAccountMeta<string> = string,
  TAccountUserAccountB extends string | IAccountMeta<string> = string,
  TAccountUserLpAccount extends string | IAccountMeta<string> = string,
  TAccountPoolLpAccount extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountExtraAccountMetaListA extends string | IAccountMeta<string> = string,
  TAccountMintTradeCounterA extends string | IAccountMeta<string> = string,
  TAccountExtraAccountMetaListB extends string | IAccountMeta<string> = string,
  TAccountMintTradeCounterB extends string | IAccountMeta<string> = string,
  TAccountTransferHookProgramA extends string | IAccountMeta<string> = string,
  TAccountTransferHookProgramB extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAmm extends string ? ReadonlyAccount<TAccountAmm> : TAccountAmm,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountPoolAccountA extends string
        ? WritableAccount<TAccountPoolAccountA>
        : TAccountPoolAccountA,
      TAccountPoolAccountB extends string
        ? WritableAccount<TAccountPoolAccountB>
        : TAccountPoolAccountB,
      TAccountUserAccountA extends string
        ? WritableAccount<TAccountUserAccountA>
        : TAccountUserAccountA,
      TAccountUserAccountB extends string
        ? WritableAccount<TAccountUserAccountB>
        : TAccountUserAccountB,
      TAccountUserLpAccount extends string
        ? WritableAccount<TAccountUserLpAccount>
        : TAccountUserLpAccount,
      TAccountPoolLpAccount extends string
        ? ReadonlyAccount<TAccountPoolLpAccount>
        : TAccountPoolLpAccount,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountExtraAccountMetaListA extends string
        ? ReadonlyAccount<TAccountExtraAccountMetaListA>
        : TAccountExtraAccountMetaListA,
      TAccountMintTradeCounterA extends string
        ? WritableAccount<TAccountMintTradeCounterA>
        : TAccountMintTradeCounterA,
      TAccountExtraAccountMetaListB extends string
        ? ReadonlyAccount<TAccountExtraAccountMetaListB>
        : TAccountExtraAccountMetaListB,
      TAccountMintTradeCounterB extends string
        ? WritableAccount<TAccountMintTradeCounterB>
        : TAccountMintTradeCounterB,
      TAccountTransferHookProgramA extends string
        ? ReadonlyAccount<TAccountTransferHookProgramA>
        : TAccountTransferHookProgramA,
      TAccountTransferHookProgramB extends string
        ? ReadonlyAccount<TAccountTransferHookProgramB>
        : TAccountTransferHookProgramB,
      ...TRemainingAccounts,
    ]
  >;

export type DepositLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountA: bigint;
  amountB: bigint;
};

export type DepositLiquidityInstructionDataArgs = {
  amountA: number | bigint;
  amountB: number | bigint;
};

export function getDepositLiquidityInstructionDataEncoder(): Encoder<DepositLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountA', getU64Encoder()],
      ['amountB', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_LIQUIDITY_DISCRIMINATOR })
  );
}

export function getDepositLiquidityInstructionDataDecoder(): Decoder<DepositLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountA', getU64Decoder()],
    ['amountB', getU64Decoder()],
  ]);
}

export function getDepositLiquidityInstructionDataCodec(): Codec<
  DepositLiquidityInstructionDataArgs,
  DepositLiquidityInstructionData
> {
  return combineCodec(
    getDepositLiquidityInstructionDataEncoder(),
    getDepositLiquidityInstructionDataDecoder()
  );
}

export type DepositLiquidityAsyncInput<
  TAccountAmm extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountPoolAccountA extends string = string,
  TAccountPoolAccountB extends string = string,
  TAccountUserAccountA extends string = string,
  TAccountUserAccountB extends string = string,
  TAccountUserLpAccount extends string = string,
  TAccountPoolLpAccount extends string = string,
  TAccountLpMint extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountExtraAccountMetaListA extends string = string,
  TAccountMintTradeCounterA extends string = string,
  TAccountExtraAccountMetaListB extends string = string,
  TAccountMintTradeCounterB extends string = string,
  TAccountTransferHookProgramA extends string = string,
  TAccountTransferHookProgramB extends string = string,
> = {
  amm?: Address<TAccountAmm>;
  pool?: Address<TAccountPool>;
  poolAuthority?: Address<TAccountPoolAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  poolAccountA?: Address<TAccountPoolAccountA>;
  poolAccountB?: Address<TAccountPoolAccountB>;
  userAccountA?: Address<TAccountUserAccountA>;
  userAccountB?: Address<TAccountUserAccountB>;
  userLpAccount?: Address<TAccountUserLpAccount>;
  poolLpAccount: Address<TAccountPoolLpAccount>;
  lpMint: Address<TAccountLpMint>;
  user: TransactionSigner<TAccountUser>;
  /** Solana ecosystem accounts */
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Transfer hook accounts for mint A */
  extraAccountMetaListA: Address<TAccountExtraAccountMetaListA>;
  mintTradeCounterA: Address<TAccountMintTradeCounterA>;
  /** Transfer hook accounts for mint B */
  extraAccountMetaListB: Address<TAccountExtraAccountMetaListB>;
  mintTradeCounterB: Address<TAccountMintTradeCounterB>;
  transferHookProgramA: Address<TAccountTransferHookProgramA>;
  transferHookProgramB: Address<TAccountTransferHookProgramB>;
  amountA: DepositLiquidityInstructionDataArgs['amountA'];
  amountB: DepositLiquidityInstructionDataArgs['amountB'];
};

export async function getDepositLiquidityInstructionAsync<
  TAccountAmm extends string,
  TAccountPool extends string,
  TAccountPoolAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountPoolAccountA extends string,
  TAccountPoolAccountB extends string,
  TAccountUserAccountA extends string,
  TAccountUserAccountB extends string,
  TAccountUserLpAccount extends string,
  TAccountPoolLpAccount extends string,
  TAccountLpMint extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountExtraAccountMetaListA extends string,
  TAccountMintTradeCounterA extends string,
  TAccountExtraAccountMetaListB extends string,
  TAccountMintTradeCounterB extends string,
  TAccountTransferHookProgramA extends string,
  TAccountTransferHookProgramB extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: DepositLiquidityAsyncInput<
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUserLpAccount,
    TAccountPoolLpAccount,
    TAccountLpMint,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DepositLiquidityInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUserLpAccount,
    TAccountPoolLpAccount,
    TAccountLpMint,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    amm: { value: input.amm ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    poolAccountA: { value: input.poolAccountA ?? null, isWritable: true },
    poolAccountB: { value: input.poolAccountB ?? null, isWritable: true },
    userAccountA: { value: input.userAccountA ?? null, isWritable: true },
    userAccountB: { value: input.userAccountB ?? null, isWritable: true },
    userLpAccount: { value: input.userLpAccount ?? null, isWritable: true },
    poolLpAccount: { value: input.poolLpAccount ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    extraAccountMetaListA: {
      value: input.extraAccountMetaListA ?? null,
      isWritable: false,
    },
    mintTradeCounterA: {
      value: input.mintTradeCounterA ?? null,
      isWritable: true,
    },
    extraAccountMetaListB: {
      value: input.extraAccountMetaListB ?? null,
      isWritable: false,
    },
    mintTradeCounterB: {
      value: input.mintTradeCounterB ?? null,
      isWritable: true,
    },
    transferHookProgramA: {
      value: input.transferHookProgramA ?? null,
      isWritable: false,
    },
    transferHookProgramB: {
      value: input.transferHookProgramB ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.amm.value) {
    accounts.amm.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 109, 109])),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.pool.value) {
    accounts.pool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.amm.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.poolAccountA.value) {
    accounts.poolAccountA.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.poolAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.poolAccountB.value) {
    accounts.poolAccountB.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.poolAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.userAccountA.value) {
    accounts.userAccountA.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.userAccountB.value) {
    accounts.userAccountB.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.userLpAccount.value) {
    accounts.userLpAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.lpMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.poolAccountA),
      getAccountMeta(accounts.poolAccountB),
      getAccountMeta(accounts.userAccountA),
      getAccountMeta(accounts.userAccountB),
      getAccountMeta(accounts.userLpAccount),
      getAccountMeta(accounts.poolLpAccount),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.extraAccountMetaListA),
      getAccountMeta(accounts.mintTradeCounterA),
      getAccountMeta(accounts.extraAccountMetaListB),
      getAccountMeta(accounts.mintTradeCounterB),
      getAccountMeta(accounts.transferHookProgramA),
      getAccountMeta(accounts.transferHookProgramB),
    ],
    programAddress,
    data: getDepositLiquidityInstructionDataEncoder().encode(
      args as DepositLiquidityInstructionDataArgs
    ),
  } as DepositLiquidityInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUserLpAccount,
    TAccountPoolLpAccount,
    TAccountLpMint,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >;

  return instruction;
}

export type DepositLiquidityInput<
  TAccountAmm extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountPoolAccountA extends string = string,
  TAccountPoolAccountB extends string = string,
  TAccountUserAccountA extends string = string,
  TAccountUserAccountB extends string = string,
  TAccountUserLpAccount extends string = string,
  TAccountPoolLpAccount extends string = string,
  TAccountLpMint extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountExtraAccountMetaListA extends string = string,
  TAccountMintTradeCounterA extends string = string,
  TAccountExtraAccountMetaListB extends string = string,
  TAccountMintTradeCounterB extends string = string,
  TAccountTransferHookProgramA extends string = string,
  TAccountTransferHookProgramB extends string = string,
> = {
  amm: Address<TAccountAmm>;
  pool: Address<TAccountPool>;
  poolAuthority: Address<TAccountPoolAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  poolAccountA: Address<TAccountPoolAccountA>;
  poolAccountB: Address<TAccountPoolAccountB>;
  userAccountA: Address<TAccountUserAccountA>;
  userAccountB: Address<TAccountUserAccountB>;
  userLpAccount: Address<TAccountUserLpAccount>;
  poolLpAccount: Address<TAccountPoolLpAccount>;
  lpMint: Address<TAccountLpMint>;
  user: TransactionSigner<TAccountUser>;
  /** Solana ecosystem accounts */
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Transfer hook accounts for mint A */
  extraAccountMetaListA: Address<TAccountExtraAccountMetaListA>;
  mintTradeCounterA: Address<TAccountMintTradeCounterA>;
  /** Transfer hook accounts for mint B */
  extraAccountMetaListB: Address<TAccountExtraAccountMetaListB>;
  mintTradeCounterB: Address<TAccountMintTradeCounterB>;
  transferHookProgramA: Address<TAccountTransferHookProgramA>;
  transferHookProgramB: Address<TAccountTransferHookProgramB>;
  amountA: DepositLiquidityInstructionDataArgs['amountA'];
  amountB: DepositLiquidityInstructionDataArgs['amountB'];
};

export function getDepositLiquidityInstruction<
  TAccountAmm extends string,
  TAccountPool extends string,
  TAccountPoolAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountPoolAccountA extends string,
  TAccountPoolAccountB extends string,
  TAccountUserAccountA extends string,
  TAccountUserAccountB extends string,
  TAccountUserLpAccount extends string,
  TAccountPoolLpAccount extends string,
  TAccountLpMint extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountExtraAccountMetaListA extends string,
  TAccountMintTradeCounterA extends string,
  TAccountExtraAccountMetaListB extends string,
  TAccountMintTradeCounterB extends string,
  TAccountTransferHookProgramA extends string,
  TAccountTransferHookProgramB extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: DepositLiquidityInput<
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUserLpAccount,
    TAccountPoolLpAccount,
    TAccountLpMint,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >,
  config?: { programAddress?: TProgramAddress }
): DepositLiquidityInstruction<
  TProgramAddress,
  TAccountAmm,
  TAccountPool,
  TAccountPoolAuthority,
  TAccountMintA,
  TAccountMintB,
  TAccountPoolAccountA,
  TAccountPoolAccountB,
  TAccountUserAccountA,
  TAccountUserAccountB,
  TAccountUserLpAccount,
  TAccountPoolLpAccount,
  TAccountLpMint,
  TAccountUser,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountExtraAccountMetaListA,
  TAccountMintTradeCounterA,
  TAccountExtraAccountMetaListB,
  TAccountMintTradeCounterB,
  TAccountTransferHookProgramA,
  TAccountTransferHookProgramB
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    amm: { value: input.amm ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    poolAccountA: { value: input.poolAccountA ?? null, isWritable: true },
    poolAccountB: { value: input.poolAccountB ?? null, isWritable: true },
    userAccountA: { value: input.userAccountA ?? null, isWritable: true },
    userAccountB: { value: input.userAccountB ?? null, isWritable: true },
    userLpAccount: { value: input.userLpAccount ?? null, isWritable: true },
    poolLpAccount: { value: input.poolLpAccount ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    extraAccountMetaListA: {
      value: input.extraAccountMetaListA ?? null,
      isWritable: false,
    },
    mintTradeCounterA: {
      value: input.mintTradeCounterA ?? null,
      isWritable: true,
    },
    extraAccountMetaListB: {
      value: input.extraAccountMetaListB ?? null,
      isWritable: false,
    },
    mintTradeCounterB: {
      value: input.mintTradeCounterB ?? null,
      isWritable: true,
    },
    transferHookProgramA: {
      value: input.transferHookProgramA ?? null,
      isWritable: false,
    },
    transferHookProgramB: {
      value: input.transferHookProgramB ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.amm),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.poolAccountA),
      getAccountMeta(accounts.poolAccountB),
      getAccountMeta(accounts.userAccountA),
      getAccountMeta(accounts.userAccountB),
      getAccountMeta(accounts.userLpAccount),
      getAccountMeta(accounts.poolLpAccount),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.extraAccountMetaListA),
      getAccountMeta(accounts.mintTradeCounterA),
      getAccountMeta(accounts.extraAccountMetaListB),
      getAccountMeta(accounts.mintTradeCounterB),
      getAccountMeta(accounts.transferHookProgramA),
      getAccountMeta(accounts.transferHookProgramB),
    ],
    programAddress,
    data: getDepositLiquidityInstructionDataEncoder().encode(
      args as DepositLiquidityInstructionDataArgs
    ),
  } as DepositLiquidityInstruction<
    TProgramAddress,
    TAccountAmm,
    TAccountPool,
    TAccountPoolAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountPoolAccountA,
    TAccountPoolAccountB,
    TAccountUserAccountA,
    TAccountUserAccountB,
    TAccountUserLpAccount,
    TAccountPoolLpAccount,
    TAccountLpMint,
    TAccountUser,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountExtraAccountMetaListA,
    TAccountMintTradeCounterA,
    TAccountExtraAccountMetaListB,
    TAccountMintTradeCounterB,
    TAccountTransferHookProgramA,
    TAccountTransferHookProgramB
  >;

  return instruction;
}

export type ParsedDepositLiquidityInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    amm: TAccountMetas[0];
    pool: TAccountMetas[1];
    poolAuthority: TAccountMetas[2];
    mintA: TAccountMetas[3];
    mintB: TAccountMetas[4];
    poolAccountA: TAccountMetas[5];
    poolAccountB: TAccountMetas[6];
    userAccountA: TAccountMetas[7];
    userAccountB: TAccountMetas[8];
    userLpAccount: TAccountMetas[9];
    poolLpAccount: TAccountMetas[10];
    lpMint: TAccountMetas[11];
    user: TAccountMetas[12];
    /** Solana ecosystem accounts */
    systemProgram: TAccountMetas[13];
    associatedTokenProgram: TAccountMetas[14];
    tokenProgram: TAccountMetas[15];
    /** Transfer hook accounts for mint A */
    extraAccountMetaListA: TAccountMetas[16];
    mintTradeCounterA: TAccountMetas[17];
    /** Transfer hook accounts for mint B */
    extraAccountMetaListB: TAccountMetas[18];
    mintTradeCounterB: TAccountMetas[19];
    transferHookProgramA: TAccountMetas[20];
    transferHookProgramB: TAccountMetas[21];
  };
  data: DepositLiquidityInstructionData;
};

export function parseDepositLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDepositLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 22) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      amm: getNextAccount(),
      pool: getNextAccount(),
      poolAuthority: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      poolAccountA: getNextAccount(),
      poolAccountB: getNextAccount(),
      userAccountA: getNextAccount(),
      userAccountB: getNextAccount(),
      userLpAccount: getNextAccount(),
      poolLpAccount: getNextAccount(),
      lpMint: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      extraAccountMetaListA: getNextAccount(),
      mintTradeCounterA: getNextAccount(),
      extraAccountMetaListB: getNextAccount(),
      mintTradeCounterB: getNextAccount(),
      transferHookProgramA: getNextAccount(),
      transferHookProgramB: getNextAccount(),
    },
    data: getDepositLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
